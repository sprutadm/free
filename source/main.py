import os
import requests
import urllib.parse
import urllib3
from github import Github, Auth, InputGitTreeElement
from github import GithubException
from datetime import datetime
import zoneinfo
import concurrent.futures
import threading
import re
from collections import defaultdict
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# -------------------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï --------------------
# –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–æ–º–µ—Ä—É —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –∑–∞—Ç–µ–º –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö –≤ –ø–æ—Ä—è–¥–∫–µ 1 ‚Üí N

LOGS_BY_FILE: dict[int, list[str]] = defaultdict(list)
_LOG_LOCK = threading.Lock()
changed_file_numbers = []


_GITHUBMIRROR_INDEX_RE = re.compile(r"githubmirror/mariya-(\d+)\.txt")


def _extract_index(msg: str) -> int:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ 'githubmirror/mariya-12.txt'.
    –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 (–¥–ª—è –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)."""
    m = _GITHUBMIRROR_INDEX_RE.search(msg)
    if m:
        try:
            return int(m.group(1))
        except ValueError:
            pass
    return 0


def log(message: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å –ª–æ–≥–æ–≤ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ."""
    idx = _extract_index(message)
    with _LOG_LOCK:
        LOGS_BY_FILE[idx].append(message)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ï–≤—Ä–æ–ø–∞/–í–∞—Ä—à–∞–≤–∞
zone = zoneinfo.ZoneInfo("Europe/Warsaw")
thistime = datetime.now(zone)
offset = thistime.strftime("%H:%M | %d.%m.%Y")  # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–º–º–∏—Ç–æ–≤

# –ü–æ–ª—É—á–µ–Ω–∏–µ GitHub —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
GITHUB_TOKEN = os.environ.get("MY_TOKEN")
# –ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
REPO_NAME = "sprutadm/free"

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Github –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
if GITHUB_TOKEN:
    g = Github(auth=Auth.Token(GITHUB_TOKEN))
else:
    g = Github()

REPO = g.get_repo(REPO_NAME)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
if not os.path.exists("githubmirror"):
    os.mkdir("githubmirror")

# –°–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
URLS = [
    "https://istanbulsydneyhotel.com/blogs/site/sni.php?security=reality", #1
    "https://istanbulsydneyhotel.com/blogs/site/sni.php", #2
    "https://raw.githubusercontent.com/ermaozi/get_subscribe/main/subscribe/v2ray.txt", #3
    "https://raw.githubusercontent.com/acymz/AutoVPN/refs/heads/main/data/V2.txt", #4
    "https://raw.githubusercontent.com/AliDev-ir/FreeVPN/main/pcvpn", #5
    "https://raw.githubusercontent.com/roosterkid/openproxylist/main/V2RAY_RAW.txt", #6
    "https://github.com/Epodonios/v2ray-configs/raw/main/Splitted-By-Protocol/trojan.txt", #7
    "https://raw.githubusercontent.com/YasserDivaR/pr0xy/main/mycustom1.txt", #8
    "https://vpn.fail/free-proxy/v2ray", #9
    "https://raw.githubusercontent.com/Proxydaemitelegram/Proxydaemi44/refs/heads/main/Proxydaemi44", #10
    "https://raw.githubusercontent.com/youfoundamin/V2rayCollector/main/mixed_iran.txt", #11
    # "https://raw.githubusercontent.com/mheidari98/.proxy/refs/heads/main/all", #12
    "https://raw.githubusercontent.com/MrMohebi/xray-proxy-grabber-telegram/master/collected-proxies/row-url/all.txt", #12
    "https://github.com/Kwinshadow/TelegramV2rayCollector/raw/refs/heads/main/sublinks/mix.txt", #13
    "https://github.com/LalatinaHub/Mineral/raw/refs/heads/master/result/nodes", #14
    "https://raw.githubusercontent.com/miladtahanian/multi-proxy-config-fetcher/refs/heads/main/configs/proxy_configs.txt", #15
    "https://github.com/freefq/free/raw/refs/heads/master/v2", #16
    "https://github.com/MhdiTaheri/V2rayCollector_Py/raw/refs/heads/main/sub/Mix/mix.txt", #17
    "https://github.com/Epodonios/v2ray-configs/raw/main/Splitted-By-Protocol/vmess.txt", #18
    "https://github.com/MhdiTaheri/V2rayCollector/raw/refs/heads/main/sub/mix", #19
    "https://raw.githubusercontent.com/mehran1404/Sub_Link/refs/heads/main/V2RAY-Sub.txt", #20
    "https://raw.githubusercontent.com/shabane/kamaji/master/hub/merged.txt", #21
    "https://raw.githubusercontent.com/wuqb2i4f/xray-config-toolkit/main/output/base64/mix-uri", #22
    "https://raw.githubusercontent.com/AzadNetCH/Clash/refs/heads/main/AzadNet.txt", #23
    "https://raw.githubusercontent.com/STR97/STRUGOV/refs/heads/main/STR.BYPASS#STR.BYPASS%F0%9F%91%BE", #24
    "https://raw.githubusercontent.com/V2RayRoot/V2RayConfig/refs/heads/main/Config/vless.txt", #25
]

# –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
REMOTE_PATHS = [f"githubmirror/mariya-{i+1}.txt" for i in range(len(URLS))]
LOCAL_PATHS = [f"githubmirror/mariya-{i+1}.txt" for i in range(len(URLS))]

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å verify=False
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# UA Chrome 138 (Windows 10 x64)
CHROME_UA = (
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
    "AppleWebKit/537.36 (KHTML, like Gecko) "
    "Chrome/138.0.0.0 Safari/537.36"
)


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –ø—É–ª–æ–≤ –ø–æ—Ç–æ–∫–æ–≤
DEFAULT_MAX_WORKERS = int(os.environ.get("MAX_WORKERS", "16"))

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è HTTP-—Å–µ—Å—Å–∏—è —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
def _build_session(max_pool_size: int) -> requests.Session:
    session = requests.Session()
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ç—Ä–∞–∏ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö —Å–±–æ–µ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ TCP/—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    adapter = HTTPAdapter(
        pool_connections=max_pool_size,
        pool_maxsize=max_pool_size,
        max_retries=Retry(
            total=1,
            backoff_factor=0.2,
            status_forcelist=(429, 500, 502, 503, 504),
            allowed_methods=(
                "HEAD",
                "GET",
                "OPTIONS",
            ),
        ),
    )
    session.mount("http://", adapter)
    session.mount("https://", adapter)
    session.headers.update({"User-Agent": CHROME_UA})
    return session


REQUESTS_SESSION = _build_session(max_pool_size=max(DEFAULT_MAX_WORKERS, len(URLS))) if 'URLS' in globals() else _build_session(DEFAULT_MAX_WORKERS)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ URL
def fetch_data(url: str, timeout: int = 10, max_attempts: int = 3, session: requests.Session | None = None) -> str:
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ URL, –¥–µ–ª–∞—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫.

    –õ–æ–≥–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫:
    1. –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –∫–∞–∫ –µ—Å—Ç—å (verify=True).
    2. –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî verify=False (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç).
    3. –¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –º–µ–Ω—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª https ‚Üí http –∏ verify=False.
    """

    sess = session or REQUESTS_SESSION

    for attempt in range(1, max_attempts + 1):
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            modified_url = url
            verify = True

            if attempt == 2:
                # –ü–æ–ø—ã—Ç–∫–∞ 2: –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                verify = False
            elif attempt == 3:
                # –ü–æ–ø—ã—Ç–∫–∞ 3: –ø—Ä–æ–±—É–µ–º http –≤–º–µ—Å—Ç–æ https
                parsed = urllib.parse.urlparse(url)
                if parsed.scheme == "https":
                    modified_url = parsed._replace(scheme="http").geturl()
                verify = False

            response = sess.get(modified_url, timeout=timeout, verify=verify)
            response.raise_for_status()
            return response.text

        except requests.exceptions.RequestException as exc:
            last_exc = exc  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
            # –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
            if attempt < max_attempts:
                continue
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise last_exc

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
def save_to_local_file(path, content):
    with open(path, "w", encoding="utf-8") as file:
        file.write(content)
    log(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –≤ {path}")

# –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub (–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π)
def upload_to_github(local_path, remote_path):
    if not os.path.exists(local_path):
        log(f"‚ùå –§–∞–π–ª {local_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    repo = REPO
    with open(local_path, "r", encoding="utf-8") as file:
        content = file.read()

    max_retries = 3
    for attempt in range(max_retries):
        try:
            file_in_repo = repo.get_contents(remote_path)
            remote_content = None
            if getattr(file_in_repo, "encoding", None) == "base64":
                try:
                    remote_content = file_in_repo.decoded_content.decode("utf-8")
                except Exception:
                    remote_content = None

            if remote_content is None or remote_content != content:
                # –§–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–º–∏—Ç–∞
                log(f"‚úÖ –§–∞–π–ª {remote_path} –∏–∑–º–µ–Ω–∏–ª—Å—è")
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –º–∞—Å—Å–∏–≤ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö
                basename = os.path.basename(remote_path)
                if basename.startswith("mariya-") and basename.endswith(".txt"):
                    try:
                        num = int(basename[7:-4])  # —É–±–∏—Ä–∞–µ–º "mariya-" –∏ ".txt"
                        changed_file_numbers.append(num)
                        print(f"üîç DEBUG: added file number {num} to changed_file_numbers")
                    except ValueError:
                        pass
                return (local_path, remote_path, content)
            else:
                log(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {remote_path} –Ω–µ—Ç.")
                return None
        except GithubException as e:
            if e.status == 404:
                # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                log(f"üÜï –§–∞–π–ª {remote_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.")
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –º–∞—Å—Å–∏–≤ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö
                basename = os.path.basename(remote_path)
                if basename.startswith("mariya-") and basename.endswith(".txt"):
                    try:
                        num = int(basename[7:-4])  # —É–±–∏—Ä–∞–µ–º "mariya-" –∏ ".txt"
                        changed_file_numbers.append(num)
                        print(f"üîç DEBUG: added file number {num} to changed_file_numbers (404)")
                    except ValueError:
                        pass
                return (local_path, remote_path, content)
            elif e.status == 409 and attempt < max_retries - 1:
                # SHA conflict ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                log(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç SHA –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {remote_path}, –ø–æ–≤—Ç–æ—Ä—è—é (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1})")
                continue
            else:
                log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {remote_path}: {e.data.get('message', e)}")
                return

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
def download_and_save(idx):
    url = URLS[idx]
    local_path = LOCAL_PATHS[idx]
    try:
        data = fetch_data(url)

        # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –∑–∞–≥—Ä—É–∑–∫—É
        if os.path.exists(local_path):
            try:
                with open(local_path, "r", encoding="utf-8") as f_old:
                    old_data = f_old.read()
                if old_data == data:
                    log(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {local_path} –Ω–µ—Ç (–ª–æ–∫–∞–ª—å–Ω–æ). –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ GitHub.")
                    return None
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º
                pass

        save_to_local_file(local_path, data)
        return local_path, REMOTE_PATHS[idx]
    except Exception as e:
        short_msg = str(e)
        if len(short_msg) > 200:
            short_msg = short_msg[:200] + "‚Ä¶"
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {url}: {short_msg}")
        return None

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–∫–∞—á–∏–≤–∞–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏
# –°–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω –∫–æ–º–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ Git Data API
def commit_files_batch(repo, changed_files: list[tuple[str, str, str]], message: str):
    """
    changed_files: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (local_path, remote_path, content) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    if not changed_files:
        return

    # 1) —á–∏—Ç–∞–µ–º –≤–µ—Ç–∫—É
    ref = repo.get_git_ref("heads/main")
    base_commit = repo.get_git_commit(ref.object.sha)

    # 2) —Ñ–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–µ—Ä–µ–≤–∞
    tree_elements: list[InputGitTreeElement] = []
    print(f"üîç DEBUG commit_files_batch: processing {len(changed_files)} files")
    for i, (local_path, remote_path, content) in enumerate(changed_files):
        print(f"üîç DEBUG: processing file {i}: {remote_path}")
        blob = repo.create_git_blob(content, "utf-8")
        elem = InputGitTreeElement(
            path=remote_path,
            mode="100644",
            type="blob",
            sha=blob.sha,
        )
        tree_elements.append(elem)
        print(f"üîç DEBUG: created blob for {remote_path}, sha={blob.sha}")

    # 3) —Å–æ–∑–¥–∞—ë–º –¥–µ—Ä–µ–≤–æ –∏ –∫–æ–º–º–∏—Ç
    new_tree = repo.create_git_tree(tree_elements, base_commit.tree)
    commit = repo.create_git_commit(message, new_tree, [base_commit])
    ref.edit(commit.sha)

def main():
    global changed_file_numbers
    changed_file_numbers = []  # –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –ª–æ–∫–∞–ª—å–Ω–æ
    max_workers_download = min(DEFAULT_MAX_WORKERS, max(1, len(URLS)))

    changed_files: list[tuple[str, str, str]] = []  # <--- —Å–æ–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers_download) as download_pool:
        download_futures = [download_pool.submit(download_and_save, i) for i in range(len(URLS))]

        for future in concurrent.futures.as_completed(download_futures):
            result = future.result()
            if result:
                local_path, remote_path = result
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                changed_data = upload_to_github(local_path, remote_path)
                if changed_data:
                    changed_files.append(changed_data)

    # –ï–î–ò–ù–´–ô –ö–û–ú–ú–ò–¢ –î–õ–Ø –í–°–ï–• –ò–ó–ú–ï–ù–ï–ù–ò–ô
    if changed_files:
        # –û–¢–õ–ê–î–ö–ê: –ø–µ—á–∞—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Å—Å–∏–≤–æ–≤
        print(f"üîç DEBUG: changed_file_numbers = {changed_file_numbers}")
        print(f"üîç DEBUG: changed_files count = {len(changed_files)}")
        for i, (local_path, remote_path, content) in enumerate(changed_files):
            print(f"üîç DEBUG: changed_files[{i}] = local='{local_path}', remote='{remote_path}', content_len={len(content)}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä–∞ —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        file_numbers = sorted(changed_file_numbers)
        numbers_str = ", ".join(map(str, file_numbers))
        message = f"Update [{numbers_str}] - Data : {offset}"
        print(f"üîç DEBUG: commit message = '{message}'")
        try:
            commit_files_batch(REPO, changed_files, message)
            log(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–º–∏—Ç —Å {len(changed_files)} –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")
        except GithubException as e:
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞—Ç—á-–∫–æ–º–º–∏—Ç–∞: {getattr(e, 'data', {}) or str(e)}")
    else:
        log("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –∫–æ–º–º–∏—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    # -------------------- –ü–ï–ß–ê–¢–¨ –°–û–ë–†–ê–ù–ù–´–• –õ–û–ì–û–í --------------------
    ordered_keys = sorted(k for k in LOGS_BY_FILE.keys() if k != 0)

    output_lines: list[str] = []

    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ñ–∞–π–ª–∞–º –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–æ–º–µ—Ä–∞
    for k in ordered_keys:
        output_lines.append(f"----- {k}.txt -----")
        output_lines.extend(LOGS_BY_FILE[k])

    # –î–∞–ª–µ–µ –≤—ã–≤–æ–¥–∏–º –æ–±—â–∏–µ/–Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–ª—é—á 0)
    if LOGS_BY_FILE.get(0):
        output_lines.append("----- –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è -----")
        output_lines.extend(LOGS_BY_FILE[0])

    print("\n".join(output_lines))

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    main()
